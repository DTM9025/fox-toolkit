dnl Process this file with autoconf to produce a configure script.
AC_INIT(include/fx.h)

dnl Major Library release number
FOX_MAJOR_VERSION=1

dnl Minor Library release number
FOX_MINOR_VERSION=0

dnl Increment after every source code change
FOX_PATCH_LEVEL=0

dnl Binaries compiled with this patchlevel of FOX will need at least
dnl version MAJOR.MINOR.INTERFACE_VERSION to run. The assertion
dnl FOX_INTERFACE_VERSION >= FOX_BINARY_VERSION must hold.
dnl
dnl Increment this when an API is added
FOX_INTERFACE_VERSION=0

dnl Binaries compiled with at least MAJOR.MINOR.BINARY_VERSION are
dnl compatible with this release of FOX.
dnl
dnl Set this to FOX_INTERFACE_VERSION's value if API changed or removed
FOX_BINARY_VERSION=0

dnl Combined version number
VERSION=$FOX_MAJOR_VERSION.$FOX_MINOR_VERSION.$FOX_PATCH_LEVEL
AM_INIT_AUTOMAKE(fox,$VERSION)

dnl Report what was found
AC_MSG_CHECKING(major version)
AC_MSG_RESULT($FOX_MAJOR_VERSION)
AC_MSG_CHECKING(minor version)
AC_MSG_RESULT($FOX_MINOR_VERSION)
AC_MSG_CHECKING(patchlevel)
AC_MSG_RESULT($FOX_PATCH_LEVEL)

AC_SUBST(FOX_MAJOR_VERSION)
AC_SUBST(FOX_MINOR_VERSION)
AC_SUBST(FOX_PATCH_LEVEL)

dnl Calculate libtool versioning information
LT_RELEASE=$FOX_MAJOR_VERSION.$FOX_MINOR_VERSION
LT_CURRENT=$FOX_INTERFACE_VERSION
LT_REVISION=`expr $FOX_PATCH_LEVEL - $FOX_INTERFACE_VERSION`
LT_AGE=`expr $FOX_INTERFACE_VERSION - $FOX_BINARY_VERSION`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Prevents setting flags.
CXXFLAGS=""

dnl Checks for programs.
AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AM_PROG_LIBTOOL

dnl Byte order
AC_C_BIGENDIAN
if test "x$ac_cv_c_bigendian" = "xyes"; then
FOX_BYTEORDER=1
else
FOX_BYTEORDER=0
fi
AC_SUBST(FOX_BYTEORDER)


dnl Checks for header files.
AC_PATH_X
AC_PATH_XTRA

dnl Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_HEADER_DIRENT
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(sys/param.h)
AC_CHECK_HEADERS(sys/select.h)

dnl Checks for the MingW32 compiler environment. If present, sets shell
dnl variable MINGW32 to 'yes'. If not present, sets MINGW32 to the
dnl empty string.
AC_MINGW32()

dnl Check to see if they specified MingW32 location
AC_ARG_WITH(mingw32,[  --with-mingw32[=DIR]    MingW32 installation location])

dnl Checks for the Cygwin environment. If present, sets shell variable
dnl CYGWIN to 'yes'; if not present, sets CYGWIN to the empty string.
AC_CYGWIN()

dnl Clear out the X11 flags for the case where we're cross-compiling
dnl for i586-mingw32 targets under Unix.
if test "x$CYGWIN" = "xyes" -o "x$MINGW32" = "xyes" ; then
X_CFLAGS=""
X_LIBS=""
fi

saved_cppflags="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $X_CFLAGS"

dnl Check for shared memory
XSHM="HAVE_XSHM"
AC_CHECK_HEADER(X11/extensions/XShm.h,,XSHM="")
AC_CHECK_HEADER(sys/ipc.h,,XSHM="")
AC_CHECK_HEADER(sys/shm.h,,XSHM="")
AC_ARG_ENABLE(shm,[  --with-shm              choices are yes, no])
AC_MSG_RESULT([$with_shm])
if test "x$with_shm" = "xno" ; then
XSHM=""
fi

CPPFLAGS="$saved_cppflags"

if test "x$XSHM" = "xHAVE_XSHM" ; then
CXXFLAGS="${CXXFLAGS} -DHAVE_XSHM"
fi


if test "x$CYGWIN" = "xyes" -o "x$MINGW32" = "xyes" ; then
AC_DEFINE(WIN32)
LIBS="${LIBS} -lcomctl32 -lwsock32 -lwinspool -lmpr"
LDFLAGS="${LDFLAGS} -mwindows -e _mainCRTStartup"
if test "x$with_mingw32" != "x" ; then
CPPFLAGS="${CPPFLAGS} -I$with_mingw32/include"
LIBS="${LIBS} -L$with_mingw32/lib"
fi
X_BASE_LIBS=""
else
X_BASE_LIBS="-lXext -lX11"
fi
AC_SUBST(X_BASE_LIBS)
AC_EXEEXT


dnl Checks for the Sun WorkShop Compiler
AC_MSG_CHECKING(for Sun WorkShop C++)
if $CXX -V 2>&1 | egrep 'WorkShop Compilers 4.2' > /dev/null; then
AC_MSG_RESULT(4.2)
CXXFLAGS="${CXXFLAGS} -instances=global -features=anachronisms"
elif $CXX -V 2>&1 | egrep 'WorkShop Compilers 5.0' > /dev/null; then
AC_MSG_RESULT(5.0)
CXXFLAGS="${CXXFLAGS} -instances=global -features=anachronisms,no%conststrings"
elif $CXX -V 2>&1 | egrep 'Sun WorkShop 6' > /dev/null; then
AC_MSG_RESULT(Forte6)
CXXFLAGS="${CXXFLAGS} -instances=global -features=anachronisms,no%conststrings"
else
AC_MSG_RESULT(no)
fi


dnl Check for JPEG Image support
dnl You can override JPEGLIB if necessary
AC_ARG_ENABLE(jpeg,[  --disable-jpeg          compile without JPEG image support])
AC_MSG_RESULT([$enable_jpeg])
if test "x$enable_jpeg" != "xno"; then
AC_CHECK_HEADERS(jpeglib.h,CXXFLAGS="${CXXFLAGS} -DHAVE_JPEG_H=1"; LIBS="${LIBS} ${JPEGLIB:=-ljpeg}")
dnl AC_CHECK_LIB(jpeg, jpeg_read_header)
fi


dnl Check for PNG Image support; note zlib is needed for PNG
dnl You can override PNGLIB if necessary
AC_ARG_ENABLE(png,[  --disable-png           compile without PNG image support])
AC_MSG_RESULT([$enable_png])
if test "x$enable_png" != "xno"; then
AC_CHECK_HEADERS(png.h,CXXFLAGS="${CXXFLAGS} -DHAVE_PNG_H=1"; LIBS="${LIBS} ${PNGLIB:=-lpng}")
dnl AC_CHECK_LIB(png, png_create_read_struct)
fi


dnl Check for TIFF Image support; note zlib is needed for TIFF
dnl You can override TIFFLIB if necessary
AC_ARG_ENABLE(tiff,[  --disable-tiff         compile without TIFF image support])
AC_MSG_RESULT([$enable_tiff])
if test "x$enable_tiff" != "xno"; then
AC_CHECK_HEADERS(tiff.h,CXXFLAGS="${CXXFLAGS} -DHAVE_TIFF_H=1"; LIBS="${LIBS} ${TIFFLIB:=-ltiff}")
fi


dnl Check for compression library
dnl You can override ZLIB if necessary
AC_ARG_ENABLE(zlib,[  --disable-zlib          compile without zlib support])
AC_MSG_RESULT([$enable_zlib])
if test "x$enable_zlib" != "xno"; then
AC_CHECK_HEADERS(zlib.h,CXXFLAGS="${CXXFLAGS} -DHAVE_ZLIB_H=1"; LIBS="${LIBS} ${ZLIB:=-lz}")
dnl AC_CHECK_LIB(z, inflateEnd)
fi

dnl Add math lib if TIFF Image support
if test "x$enable_tiff" != "xno"; then
LIBS="${LIBS} ${MATHLIB:=-lm}"
fi

dnl Check for math library
dnl AC_MSG_CHECKING(Math Library)
dnl AC_CHECK_LIB(m, atan2)

dnl Checks for library functions.
dnl AC_CHECK_FUNCS(gettimeofday)

dnl Check vsscanf
dnl Should this turn on _GNU_SOURCE?
AC_CHECK_FUNCS(vsscanf)

dnl Checking for socket libraries.
SOCKLIBS=""
AC_CHECK_LIB(socket,socket, if test "$uname" != "IRIX"; then SOCKLIBS="-lsocket"; fi)
AC_CHECK_LIB(nsl,gethostbyaddr,if test "$uname" != "IRIX"; then SOCKLIBS="${SOCKLIBS} -lnsl"; fi)

dnl Checking for CUPS
AC_MSG_CHECKING(for CUPS support)
AC_ARG_ENABLE(cups,[  --enable-cups           compile without cups support])
AC_MSG_RESULT([$enable_cups])
if test "x$enable_cups" = "xyes"; then
CUPSLIBS=""
AC_CHECK_LIB(cups,httpConnect,CUPSLIBS="-lcups")
dnl For the moment, we only need to link to socket libraries when linking with cups
AC_CHECK_HEADER(cups/cups.h,if test "x${CUPSLIBS}" != "x"; then CXXFLAGS="${CXXFLAGS} -DHAVE_CUPS_H=1"; LIBS="${LIBS} ${CUPSLIBS} ${SOCKLIBS}"; fi)
fi


dnl Add copious amounts of debugging with gcc, egcs, etc
if test "${GXX}" = "yes" ; then
CXXFLAGS="${CXXFLAGS} -Wall -W -Wmissing-prototypes -Woverloaded-virtual -Wformat"
fi

dnl Debugging turned on
AC_MSG_CHECKING(for debugging)
AC_ARG_ENABLE(debug,[  --enable-debug          compile for debugging])
AC_MSG_RESULT([$enable_debug])
if test "x$enable_debug" = "xyes" ; then
CXXFLAGS="${CXXFLAGS} -g -DDEBUG"
fi

dnl Building for release
AC_MSG_CHECKING(for release build)
AC_ARG_ENABLE(release,[  --enable-release        compile for release])
AC_MSG_RESULT([$enable_release])
if test "x$enable_release" = "xyes" ; then
CXXFLAGS="${CXXFLAGS} -O2 -DNDEBUG"
if test "${GXX}" = "yes" ; then
CXXFLAGS="${CXXFLAGS} -Wuninitialized -ffast-math -finline-functions -fomit-frame-pointer -fexpensive-optimizations"
fi
fi

dnl Enable profiling
AC_MSG_CHECKING(for profiling)
AC_ARG_ENABLE(profiling,[  --with-profiling        choices are yes, no, or gprof])
AC_MSG_RESULT([$with_profiling])
if test "x$with_profiling" = "xyes" ; then
CXXFLAGS="${CXXFLAGS} -p"
elif test "x$with_profiling" = "xgprof" ; then
CXXFLAGS="${CXXFLAGS} -pg"
fi


saved_cppflags="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $X_CFLAGS"

dnl Compile with 3D support
AC_MSG_CHECKING(for OpenGL support)
OPENGL=""
MESA=""
AC_CHECK_HEADER(GL/gl.h,OPENGL="HAVE_OPENGL",)
AC_MSG_CHECKING(for MesaGL support)
AC_CHECK_HEADER(GL/osmesa.h,MESA="HAVE_MESA",)
AC_CHECK_HEADER(GL/xmesa.h,MESA="HAVE_MESA",)

dnl Tried, but it does not find Mesa even though its there...
dnl AC_CHECK_LIB(MesaGL, glColor3f,MESA_LIBS="-lMesaGL -lMesaGLU",MESA_LIBS="-lGL -lGLU")
dnl AC_CHECK_LIB(GL, glColor3f,MESA_LIBS="-lMesaGL -lMesaGLU",MESA_LIBS="-lGL -lGLU")

CPPFLAGS="$saved_cppflags"

dnl You have the option of NOT compiling with 3D support even if you have it
dnl Or you can force OpenGL or Mesa GL if you have both
AC_ARG_ENABLE(opengl,[  --with-opengl           choices are yes, no, opengl, or mesa])
AC_MSG_RESULT([$with_opengl])
if test "x$with_opengl" = "xno" ; then
  OPENGL=""
  MESA=""
elif test "x$with_opengl" = "xopengl" ; then
  MESA=""
elif test "x$with_opengl" = "xmesa" ; then
  MESA="HAVE_MESA"
fi


dnl Having no OpenGL whatsoever means no Mesa either
GL_TESTS=""
if test "x$OPENGL" = "xHAVE_OPENGL" ; then
  if test "x$CYGWIN" = "xyes" -o "x$MINGW32" = "xyes" ; then
    CXXFLAGS="${CXXFLAGS} -DHAVE_OPENGL"
    GL_TESTS="gltest.exe glviewer.exe"
    if test "x$MESA" = "xHAVE_MESA" ; then
      CXXFLAGS="${CXXFLAGS} -DHAVE_MESA"
      GL_LIBS="-lMesaGL -lMesaGLU"
    else
      GL_LIBS="-lopengl32 -lglu32"
    fi
  else
    CXXFLAGS="${CXXFLAGS} -DHAVE_OPENGL -DSUN_OGL_NO_VERTEX_MACROS"
    GL_TESTS="gltest glviewer"
    if test "x$MESA" = "xHAVE_MESA" ; then
      CXXFLAGS="${CXXFLAGS} -DHAVE_MESA"
      GL_LIBS="-lMesaGL -lMesaGLU"
    else
      GL_LIBS="-lGL -lGLU"
    fi
  fi
fi

AC_SUBST(GL_LIBS)
AC_SUBST(GL_TESTS)


dnl Done.
AC_OUTPUT(Makefile
utils/Makefile
include/Makefile
include/fxver.h
src/Makefile
src/version.rc
doc/Makefile
doc/art/Makefile
doc/screenshots/Makefile
tests/Makefile
adie/Makefile
pathfinder/Makefile
calculator/Makefile
fox.spec)

echo ""
echo "Configure finished!"
echo "              Do:  'make' to compile FOX."
echo "            Then:  'make install' to install it."
echo ""

