/********************************************************************************
*                                                                               *
*                      T e x t   E d i t o r   C o n t r o l                    *
*                                                                               *
*********************************************************************************
* Copyright (C) 1998 by Jeroen van der Zijp.   All Rights Reserved.             *
*********************************************************************************
* $Id: textedit.cpp,v 1.16 1998/10/29 23:35:11 jvz Exp $                     *
********************************************************************************/
#include "fx.h"
#include "FXDebugTarget.h"
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>




/*******************************************************************************/


// Mini application object
class FXTextEditApp : public FXApp {
  FXDECLARE(FXTextEditApp)
protected:
  FXMainWindow*      mainwindow;              // Main window
  FXMenuBar*         menubar;                 // Menu bar
  FXMenuPane*        filemenu;                // File menu
  FXMenuPane*        helpmenu;                // Help menu
  FXHorizontalFrame* contents;                // Sunken border for text widget
  FXHorizontalFrame *toolbar;                 // Tool bar
  FXText*            editor;                  // Multiline text widget
  FXTextField*       linenumber;              // Display line number
  FXTextField*       columnnumber;            // Display column number
  FXStatusbar       *statusbar;               // Status bar
  FXString           filename;                // File being edited
  FXbool             namechanged;             // Save becomes save as if no name given yet
  FXbool             modified;                // Modified state
protected:
  FXbool loadfile(const FXString& file);
  FXbool savefile(const FXString& file);
public:
  long onCmdAbout(FXObject*,FXSelector,void*);
  long onCmdRevert(FXObject*,FXSelector,void*);
  long onUpdRevert(FXObject*,FXSelector,void*);
  long onCmdOpen(FXObject*,FXSelector,void*);
  long onCmdSave(FXObject*,FXSelector,void*);
  long onUpdSave(FXObject*,FXSelector,void*);
  long onCmdSaveAs(FXObject*,FXSelector,void*);
  long onCmdNew(FXObject*,FXSelector,void*);
public:
  enum{
    ID_ABOUT=FXApp::ID_LAST,
    ID_OPEN,
    ID_REVERT,
    ID_SAVE,
    ID_SAVEAS,
    ID_NEW,
    ID_LAST
    };
public:
  FXTextEditApp();
  void create();
  };


/*******************************************************************************/
  
  
// Save as
const unsigned char filesaveas[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf3,0x00,0x00,0x80,0x80,0x80,
  0xb2,0xc0,0xdc,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,
  0x00,0xff,0x00,0xff,0xff,0x00,0x00,0x80,0xc0,0xc0,0xc0,0x00,0x80,0x80,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,
  0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x04,0x5a,0x10,0xc8,0x19,0xaa,0xbd,0x40,0x0c,
  0x91,0xc1,0xfd,0xc0,0x36,0x10,0x24,0xf1,0x59,0x99,0x58,0x4c,0x2c,0xba,0x19,0x5a,
  0x26,0xcc,0x9c,0x17,0x64,0xc6,0x01,0xcb,0x74,0x77,0xe7,0x07,0x9d,0x0c,0xc6,0x99,
  0x49,0x04,0x40,0x1d,0x12,0xd1,0x29,0x85,0x90,0x41,0xdd,0x81,0x39,0x4b,0x24,0x08,
  0x29,0x68,0x94,0x4a,0xc3,0x8a,0xb4,0x53,0x9e,0x00,0x5b,0x4a,0x86,0x69,0xe3,0x89,
  0x01,0xc1,0x6e,0x8b,0x4d,0x16,0x85,0x02,0x3b,0x41,0xc3,0x31,0x68,0xfb,0x09,0x50,
  0xea,0x93,0x22,0x00,0x3b
  };

// File Save
const unsigned char filesave[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf2,0x00,0x00,0xb2,0xc0,0xdc,
  0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x80,0x80,0x80,0xff,0xff,0xff,0x00,
  0x00,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x03,
  0x42,0x08,0xaa,0xb1,0xfe,0x4c,0x34,0x06,0xa3,0x90,0x20,0xcc,0x1a,0xae,0xc4,0x95,
  0x75,0x6d,0x8f,0xa6,0x79,0x64,0xa6,0x0d,0x44,0x87,0x9a,0x0c,0xc1,0x9a,0xb4,0x3c,
  0x05,0x33,0xad,0xd7,0x43,0x50,0x0c,0xbf,0x20,0x10,0xb8,0x6a,0x0d,0x85,0x42,0x8d,
  0x11,0x79,0xec,0x65,0x7a,0x4c,0x64,0x23,0xb0,0x6c,0x26,0x55,0xd6,0xe6,0x6d,0xc7,
  0x55,0x24,0x00,0x00,0x3b
  };


// File Open
const unsigned char fileopen[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf2,0x00,0x00,0xb2,0xc0,0xdc,
  0x00,0x00,0x00,0x00,0xff,0x00,0xff,0xff,0x00,0x80,0x80,0x80,0xff,0xff,0xff,0x00,
  0x00,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x03,
  0x45,0x08,0xba,0x1c,0xfe,0x2c,0xae,0x20,0x44,0x90,0x91,0xd6,0x8b,0x95,0xb6,0x1c,
  0x00,0x79,0x95,0x25,0x3e,0x03,0x31,0x3c,0xa5,0x73,0xaa,0xf0,0xda,0xae,0x5e,0xfa,
  0xdc,0xb8,0xa3,0x06,0xc5,0xd0,0xff,0x3e,0x9f,0xc3,0x16,0x04,0x02,0x75,0x81,0xa2,
  0xb2,0x77,0x49,0xf2,0x96,0xc5,0x26,0x21,0x69,0x54,0x36,0xa9,0x50,0xa6,0xe7,0x59,
  0xfd,0x71,0x72,0x60,0x4e,0x02,0x00,0x3b
  };

// Print
const unsigned char print[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf2,0x00,0x00,0xb2,0xc0,0xdc,
  0x00,0x00,0x00,0xff,0xff,0xff,0xc0,0xc0,0xc0,0x80,0x80,0x80,0x00,0x80,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x03,
  0x49,0x08,0x0a,0xd1,0xbd,0x10,0x06,0x41,0x5f,0x94,0x62,0xea,0xbb,0x66,0x75,0x1c,
  0x93,0x09,0x43,0x19,0x84,0x1e,0x55,0x5d,0x8e,0x40,0x04,0x6f,0x66,0x29,0x41,0x91,
  0xaa,0xf5,0x49,0x3b,0x7c,0x7f,0x06,0x25,0x92,0x70,0x30,0x24,0x35,0x0a,0xc8,0xa4,
  0x52,0x79,0xb4,0x39,0x99,0x35,0x5b,0x74,0x49,0x95,0xfa,0xae,0x8f,0x1a,0xa1,0xb0,
  0xed,0x72,0xb9,0xba,0x17,0xd6,0x41,0x00,0x24,0x00,0x00,0x3b
  };

// File new
const unsigned char filenew[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf2,0x00,0x00,0xb2,0xc0,0xdc,
  0xff,0xff,0x00,0xff,0xff,0xff,0x80,0x80,0x80,0x00,0x00,0x00,0xc0,0xc0,0xc0,0x00,
  0x00,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x03,
  0x48,0x08,0x0a,0xb1,0xfe,0xab,0x41,0x28,0x18,0xa8,0xd3,0x85,0x3d,0xfa,0x80,0x5b,
  0x28,0x0e,0x44,0x16,0x16,0x82,0x30,0x08,0xe5,0xa3,0x06,0x68,0xba,0xb2,0xd0,0x10,
  0x08,0x31,0x49,0xec,0x8f,0x9d,0xfe,0x85,0x20,0xe1,0xb3,0xf0,0xfd,0x8e,0x43,0xc7,
  0xec,0xf8,0x4b,0x16,0x99,0x48,0xa2,0x62,0x09,0x75,0x4e,0xa1,0x4d,0x29,0x40,0xb7,
  0xeb,0x76,0xb5,0x5b,0x8f,0xd8,0x03,0x48,0x00,0x00,0x3b
  };

// Cut
const unsigned char cut[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf1,0x00,0x00,0xb2,0xc0,0xdc,
  0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,
  0x10,0x00,0x00,0x02,0x29,0x84,0x8f,0xa9,0x10,0xd7,0xeb,0x22,0x34,0x8f,0x4d,0xda,
  0x42,0x9d,0xf9,0x3a,0xed,0x49,0xa1,0x10,0x08,0x21,0x60,0x0a,0xea,0xa4,0xa6,0x86,
  0xa9,0xc0,0x2e,0xba,0xc8,0xf4,0x9d,0xd8,0x28,0x5c,0xf3,0xe7,0x54,0x00,0x00,0x3b
  };
  
// Copy
const unsigned char copy[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf1,0x00,0x00,0xb2,0xc0,0xdc,
  0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x80,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,
  0x10,0x00,0x00,0x02,0x38,0x84,0x8f,0x69,0xc1,0xad,0x18,0x84,0x14,0xec,0xad,0x49,
  0xa9,0x8d,0x8c,0x8e,0x0f,0x42,0x98,0x30,0x60,0xdf,0xc1,0x35,0xe5,0x54,0x0e,0x97,
  0x49,0x45,0xa0,0x9b,0x32,0xeb,0x48,0xe3,0x71,0x43,0x02,0x8d,0x3a,0x92,0xb8,0x14,
  0xa5,0x9f,0xec,0x71,0x33,0x21,0x67,0x33,0x8b,0xf3,0x99,0x28,0x00,0x00,0x3b
  };
  
  
// Paste
const unsigned char paste[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf2,0x00,0x00,0xb2,0xc0,0xdc,
  0x00,0x00,0x00,0xff,0xff,0x00,0xc0,0xc0,0xc0,0x80,0x80,0x00,0x80,0x80,0x80,0x00,
  0x00,0x80,0xff,0xff,0xff,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x03,
  0x4b,0x08,0xba,0xdc,0x1e,0x30,0x38,0x15,0xa1,0x10,0x55,0x52,0x52,0x48,0xc0,0x5f,
  0xd0,0x15,0x9a,0x48,0x0e,0x68,0x2a,0x7a,0x1b,0x99,0x41,0x05,0x49,0x8d,0x5c,0x4d,
  0x97,0x36,0x61,0xec,0xbc,0x51,0xd2,0x05,0xc3,0x61,0x38,0xdc,0xb5,0x6a,0x42,0xe2,
  0x41,0x68,0x00,0xac,0x46,0xc2,0xc8,0x92,0x17,0xc8,0x25,0x95,0xc5,0x27,0x27,0x9a,
  0x59,0x3a,0x2b,0x57,0x6c,0xb3,0xd1,0x2b,0x8f,0x27,0x93,0x04,0x00,0x3b
  };

  
// Penguin
const unsigned char penguin[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x12,0x00,0xf2,0x00,0x00,0xb2,0xc0,0xdc,
  0x80,0x80,0x80,0x00,0x00,0x00,0xc0,0xc0,0xc0,0x10,0x10,0x10,0xff,0xff,0xff,0xe0,
  0xa0,0x08,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x12,0x00,0x00,0x03,
  0x53,0x08,0xba,0x21,0x12,0x2b,0xc6,0xe6,0x9e,0x94,0x62,0x64,0x77,0xa3,0x20,0x4e,
  0x21,0x74,0x8b,0x60,0x9c,0x1a,0xa9,0x98,0xa8,0x45,0xb2,0x85,0x38,0x76,0x4f,0x6c,
  0xbb,0x93,0x60,0xdb,0x0d,0xe4,0xd9,0x83,0x1d,0xe7,0x57,0x18,0x04,0x6f,0xb8,0x4c,
  0xec,0x88,0x9c,0x01,0x0c,0x47,0x66,0xac,0xa2,0x38,0x19,0x76,0x36,0x83,0xc3,0xf0,
  0xb4,0x5e,0x77,0x03,0xaf,0xf8,0x7b,0x13,0x77,0xad,0xd3,0xad,0x75,0x61,0xa5,0x54,
  0x02,0x27,0x45,0x02,0x00,0x3b
  };


// Big time logo
extern const unsigned char bigpenguin[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x30,0x00,0x39,0x00,0xf3,0x00,0x00,0xb2,0xc0,0xdc,
  0x5a,0x52,0x41,0x0e,0x0b,0x0b,0x47,0x3b,0x26,0x71,0x6e,0x67,0xb7,0xb5,0xb0,0xd4,
  0xd2,0xce,0xf9,0xf7,0xf7,0x99,0x8d,0x77,0xa3,0x77,0x1b,0xee,0xba,0x12,0xbe,0xa2,
  0x14,0x8b,0x5e,0x07,0xb3,0x8b,0x27,0xee,0xc7,0x1c,0xd2,0x98,0x0f,0x2c,0x00,0x00,
  0x00,0x00,0x30,0x00,0x39,0x00,0x00,0x04,0xfe,0x10,0xc8,0x49,0xab,0x0d,0x22,0x8b,
  0x61,0xbb,0xff,0x20,0xa6,0x8d,0x1c,0x68,0x9e,0xd3,0x30,0xae,0x19,0x81,0xbe,0x9d,
  0xca,0x66,0x81,0xe8,0xc2,0x38,0x31,0x6b,0x84,0x28,0xe0,0x38,0xd9,0x6e,0x15,0x00,
  0xbe,0x84,0xc3,0x91,0x11,0x95,0x9c,0xdd,0x96,0x9f,0xe1,0x20,0x30,0x40,0x16,0xa1,
  0x51,0x01,0xa1,0xe0,0x1b,0x14,0x0a,0x06,0x9d,0xe6,0x8a,0xed,0x6c,0x0c,0x85,0x83,
  0xcc,0x70,0x40,0x18,0x0c,0xa4,0xb2,0x67,0x5a,0x2d,0x00,0x32,0x07,0x4c,0x40,0xad,
  0x29,0xc9,0x2b,0x74,0x5a,0x77,0x02,0x06,0x6b,0x5d,0x7f,0x16,0x2a,0x05,0x02,0x09,
  0x0a,0x0a,0x0b,0x0b,0x0c,0x1b,0x7c,0x19,0x7e,0x88,0x12,0x2a,0x08,0x0d,0x0a,0x0e,
  0x9d,0x9d,0x0a,0x12,0x2b,0x97,0x14,0x18,0x09,0x0f,0x9c,0x9e,0xa9,0xa2,0xa3,0x12,
  0x54,0x9b,0xa8,0x9e,0x0a,0x0f,0x0f,0x2b,0x4f,0x97,0x18,0x0c,0x8e,0xb1,0x0d,0xb3,
  0xb4,0x1b,0x34,0xac,0x00,0x18,0x08,0x0c,0x0f,0x90,0x09,0xa6,0xc6,0x00,0x2a,0x45,
  0x19,0xc1,0x3a,0x05,0x08,0xc9,0x0f,0x0d,0x0d,0x60,0x68,0x2d,0x95,0xac,0x19,0x6f,
  0xd2,0xc8,0x0d,0x00,0x6c,0x07,0x94,0x3c,0xb7,0x93,0x68,0x5f,0x5f,0xe2,0xe3,0x8b,
  0x71,0x88,0xdc,0xec,0xea,0xe3,0xf3,0xe3,0x48,0x82,0x72,0x2d,0xf4,0xeb,0xf4,0xec,
  0x2c,0x72,0x32,0xfc,0x02,0xf2,0x63,0x61,0x09,0x88,0x88,0x3d,0x02,0x13,0xda,0xdb,
  0xb0,0x44,0xcc,0x8f,0x7d,0x01,0xdf,0x48,0x44,0xe0,0xc4,0x88,0x10,0x30,0x09,0xe7,
  0x49,0x4c,0xb3,0xf0,0x07,0x90,0x3e,0xfe,0x10,0x33,0x1e,0xe8,0x56,0x11,0x86,0x8f,
  0x34,0x22,0x05,0xc2,0x99,0x81,0x63,0x4c,0xca,0x8c,0x77,0xec,0xd9,0x02,0xe1,0x30,
  0xe4,0xcb,0x71,0x2b,0x7f,0x69,0x43,0x21,0x03,0xe1,0x4d,0x81,0x3b,0x5e,0x68,0x40,
  0xf9,0x33,0x60,0xc7,0x99,0x1d,0x1c,0x16,0x55,0x38,0x83,0x4c,0x16,0x3c,0x4b,0x03,
  0x3a,0x74,0xf7,0x41,0xc8,0x80,0xa8,0x52,0x83,0x82,0xe8,0x73,0x15,0x2b,0xbd,0x41,
  0xfe,0xb6,0x56,0xf2,0xe9,0xf5,0xc0,0xd4,0x3e,0x26,0x04,0x30,0x48,0xa0,0xa5,0xec,
  0x3c,0x1f,0x95,0x18,0x82,0x38,0xe5,0x48,0x00,0xd1,0xa8,0x9d,0xe0,0xfe,0x72,0x6a,
  0x81,0x97,0x23,0x59,0x02,0x10,0x60,0x35,0xc0,0xa9,0x01,0x8b,0x04,0x0b,0x3e,0x20,
  0x98,0xf5,0x57,0x01,0xdb,0xae,0x45,0x09,0x2b,0x90,0x34,0x82,0x41,0xa7,0x0e,0xd2,
  0xfc,0x7e,0xe2,0xa4,0x02,0xf2,0x4d,0x00,0x8e,0x12,0x08,0xc9,0xe5,0x88,0x82,0xa6,
  0x5e,0x8d,0x1b,0x2f,0xa8,0xf4,0xd3,0x00,0xe8,0x59,0xc8,0xd6,0xd2,0x55,0x80,0x60,
  0x82,0xdf,0xd4,0x8d,0x3b,0xb1,0xcd,0x70,0x37,0xa1,0xeb,0x53,0xbd,0x18,0x73,0x72,
  0x54,0x1b,0x00,0x02,0x5d,0xa9,0x1d,0xa4,0x76,0xf9,0xb2,0xc0,0x2b,0x47,0xb3,0x1b,
  0x4b,0x58,0x3c,0x3c,0x77,0xee,0xdd,0x64,0x33,0x32,0x78,0x8e,0xbb,0x31,0x02,0xea,
  0xdd,0xab,0x73,0x4a,0xd0,0x5b,0xe5,0x86,0xe8,0x7f,0x95,0xa7,0x06,0x8f,0x5b,0x7d,
  0x63,0x9b,0xf4,0xda,0x05,0xa0,0xeb,0xde,0xba,0x72,0xf6,0xe1,0xab,0x27,0x10,0xe9,
  0xb0,0x58,0xfa,0xff,0x8d,0xf1,0x67,0x82,0x1e,0x72,0xb8,0x89,0x16,0xce,0x1b,0xd1,
  0x10,0x60,0x8f,0x7f,0xf9,0xc9,0x52,0x5b,0x70,0xe1,0xb9,0xf7,0x80,0x68,0x4d,0x64,
  0xc0,0x60,0x7d,0x8e,0x34,0x50,0x9c,0x71,0xdf,0x04,0x27,0x5c,0x63,0x13,0xea,0xb5,
  0xc3,0x76,0xe8,0x51,0x83,0x94,0x04,0x04,0x10,0x80,0xcc,0x8a,0x02,0xce,0xd2,0x40,
  0x02,0x0c,0x58,0x55,0xc5,0x8c,0x55,0xd0,0x90,0x40,0x8b,0xd4,0x30,0x70,0xa2,0x05,
  0x29,0x32,0xb0,0xd6,0x8a,0x3e,0x56,0xb1,0x23,0x05,0x03,0xfc,0x08,0xe4,0x86,0x2f,
  0xf4,0xe0,0x63,0x90,0x7c,0x7d,0x40,0xc5,0x92,0x0c,0x34,0x39,0x41,0x04,0x00,0x3b
  };



/*******************************************************************************/
  
// Map
FXDEFMAP(FXTextEditApp) FXTextEditAppMap[]={
  FXMAPFUNC(SEL_COMMAND, FXTextEditApp::ID_ABOUT,   FXTextEditApp::onCmdAbout),
  FXMAPFUNC(SEL_COMMAND, FXTextEditApp::ID_REVERT,  FXTextEditApp::onCmdRevert),
  FXMAPFUNC(SEL_UPDATE,  FXTextEditApp::ID_REVERT,  FXTextEditApp::onUpdRevert),
  FXMAPFUNC(SEL_COMMAND, FXTextEditApp::ID_OPEN,    FXTextEditApp::onCmdOpen),
  FXMAPFUNC(SEL_COMMAND, FXTextEditApp::ID_SAVE,    FXTextEditApp::onCmdSave),
  FXMAPFUNC(SEL_UPDATE,  FXTextEditApp::ID_SAVE,    FXTextEditApp::onUpdSave),
  FXMAPFUNC(SEL_COMMAND, FXTextEditApp::ID_SAVEAS,  FXTextEditApp::onCmdSaveAs),
  FXMAPFUNC(SEL_COMMAND, FXTextEditApp::ID_NEW,     FXTextEditApp::onCmdNew),
  };


// Object implementation
FXIMPLEMENT(FXTextEditApp,FXApp,FXTextEditAppMap,ARRAYNUMBER(FXTextEditAppMap))


// Make some windows
FXTextEditApp::FXTextEditApp(){
  
  // Make main window
  mainwindow=new FXMainWindow(this,"FOX Text Editor: - untitled",DECOR_ALL,0,0,850,600);
  
  // Make menu bar
  menubar=new FXMenuBar(mainwindow,LAYOUT_SIDE_TOP|LAYOUT_FILL_X);
  
  // Tool bar
  new FXHorizontalSeparator(mainwindow,LAYOUT_SIDE_TOP|SEPARATOR_GROOVE|LAYOUT_FILL_X);
  toolbar=new FXHorizontalFrame(mainwindow,PACK_UNIFORM_WIDTH|LAYOUT_SIDE_TOP|LAYOUT_FILL_X,0,0,0,0, 4,4,0,0, 0,0);
  
  // Status bar
  statusbar=new FXStatusbar(mainwindow,LAYOUT_SIDE_BOTTOM|LAYOUT_FILL_X|STATUSBAR_WITH_DRAGCORNER);
  
  // The good old penguin, what would we be without it?
  new FXButton(statusbar,"\tHello, I'm Tux...\nThe symbol for the Linux Operating System.\nAnd all it stands for.",new FXGIFIcon(this,penguin),NULL,0,LAYOUT_FILL_Y|LAYOUT_RIGHT);
  
  // Show column number in status bar
  columnnumber=new FXTextField(statusbar,4,NULL,0,FRAME_SUNKEN|FRAME_THICK|LAYOUT_RIGHT|LAYOUT_CENTER_Y,0,0,0,0,1,1,0,0);

  // Caption before number  
  new FXLabel(statusbar,"Col:",NULL,LAYOUT_RIGHT|LAYOUT_CENTER_Y);
  
  // Show line number in status bar
  linenumber=new FXTextField(statusbar,4,NULL,0,FRAME_SUNKEN|FRAME_THICK|LAYOUT_RIGHT|LAYOUT_CENTER_Y,0,0,0,0,1,1,0,0);

  // Caption before number  
  new FXLabel(statusbar,"Line:",NULL,LAYOUT_RIGHT|LAYOUT_CENTER_Y);
  
  // File menu
  filemenu=new FXMenuPane(this);
  new FXMenuTitle(menubar,"&File",filemenu);
    
  // Edit Menu
  FXMenuPane *editmenu=new FXMenuPane(this);
  new FXMenuTitle(menubar,"&Edit",editmenu);
  
  // View menu
  FXMenuPane *viewmenu=new FXMenuPane(this);
  new FXMenuTitle(menubar,"&View",viewmenu);
    
  // Help menu
  helpmenu=new FXMenuPane(this);
  new FXMenuTitle(menubar,"&Help",helpmenu,LAYOUT_RIGHT);

  // Make contents
  contents=new FXHorizontalFrame(mainwindow,FRAME_SUNKEN|FRAME_THICK|LAYOUT_FILL_X|LAYOUT_FILL_Y,0,0,0,0, 0,0,0,0);
  
  // Make editor window
  //editor=new FXText(contents,new FXDebugTarget,1000,LAYOUT_FILL_X|LAYOUT_FILL_Y);
  editor=new FXText(contents,NULL,0,LAYOUT_FILL_X|LAYOUT_FILL_Y);
  
  columnnumber->setTarget(editor);
  columnnumber->setSelector(FXText::ID_CURSOR_COLUMN);
  linenumber->setTarget(editor);
  linenumber->setSelector(FXText::ID_CURSOR_LINE);
  
  // Toobar buttons: File manipulation
  new FXButton(toolbar,"&New\tNew\tCreate new document.",new FXGIFIcon(this,filenew),this,ID_NEW,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  new FXButton(toolbar,"&Open\tOpen\tOpen document file.",new FXGIFIcon(this,fileopen),this,ID_OPEN,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  new FXButton(toolbar,"&Save\tSave\tSave document.",new FXGIFIcon(this,filesave),this,ID_SAVE,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  new FXButton(toolbar,"S&ave As\tSave As\tSave document to another file.",new FXGIFIcon(this,filesaveas),this,ID_SAVEAS,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  
  // Toobar buttons: Print
  new FXFrame(toolbar,LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT,0,0,4,20);
  new FXButton(toolbar,"&Print\tPrint\tPrint document.",new FXGIFIcon(this,print),NULL,0,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  
  // Toobar buttons: Editing
  new FXFrame(toolbar,LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT,0,0,20,20);
  new FXButton(toolbar,"Cut\tCut",new FXGIFIcon(this,cut),editor,FXText::ID_CUT_SEL,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  new FXButton(toolbar,"Copy\tCopy",new FXGIFIcon(this,copy),editor,FXText::ID_COPY_SEL,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  new FXButton(toolbar,"Paste\tPaste",new FXGIFIcon(this,paste),editor,FXText::ID_PASTE_SEL,ICON_ABOVE_TEXT|BUTTON_TOOLBAR|FRAME_RAISED|LAYOUT_TOP|LAYOUT_LEFT);
  
  // File Menu entries
  new FXMenuCommand(filemenu,"&Open...\t\tOpen document file.",this,ID_OPEN);
  new FXMenuCommand(filemenu,"&Revert...\t\tRevert to saved.",this,ID_REVERT);
  new FXMenuCommand(filemenu,"&New...\t\tCreate new document.",this,ID_NEW);
  new FXMenuCommand(filemenu,"&Save\t\tSave document.",this,ID_SAVE);
  new FXMenuCommand(filemenu,"Save &As...\t\tSave document to another file.",this,ID_SAVEAS);
  new FXMenuCommand(filemenu,"&Print...\t\tPrint document.");
  new FXMenuCommand(filemenu,"&Editable\t\tDocument editable.",editor,FXText::ID_TOGGLE_EDITABLE);
  new FXMenuCommand(filemenu,"&Quit",this,ID_QUIT,MENU_DEFAULT);
  
  // Edit Menu entries
  new FXMenuCommand(editmenu,"&Undo\t\tUndo last change.");
  new FXMenuCommand(editmenu,"&Redo\t\tRedo last undo.");
  new FXMenuCommand(editmenu,"&Copy\t\tCopy selection to clipboard.",editor,FXText::ID_COPY_SEL);
  new FXMenuCommand(editmenu,"C&ut\t\tCut selection to clipboard.",editor,FXText::ID_CUT_SEL);
  new FXMenuCommand(editmenu,"&Paste\t\tPaste from clipboard.",editor,FXText::ID_PASTE_SEL);
  new FXMenuCommand(editmenu,"&Delete\t\tDelete selection.",editor,FXText::ID_DELETE_SEL);
  
  // View Menu entries
  new FXMenuCommand(viewmenu,"Toolbar\t\tDisplay toolbar.",toolbar,FXWindow::ID_TOGGLESHOWN);
  new FXMenuCommand(viewmenu,"Status line\t\tDisplay status line.",statusbar,FXWindow::ID_TOGGLESHOWN);
  
  // Help Menu entries
  new FXMenuCommand(helpmenu,"&About FOX...",this,ID_ABOUT,0);
  
  // Make a tool tip
  new FXTooltip(this,0);
  
  // Initialize file name
  filename="untitled";
  namechanged=FALSE;
  modified=TRUE;
  }
  


// About box
long FXTextEditApp::onCmdAbout(FXObject*,FXSelector,void*){
  FXGIFIcon icon(this,bigpenguin);
  FXMessageBox about(this,"About Text Edit","Text Editor Demonstrates the FOX Text Widget.\n\nUsing the FOX C++ GUI Library (http://cyberia.cfdrc.com/FOX/fox.html)\n\nCopyright (C) 1998 Jeroen van der Zijp (jvz@cfdrc.com)",&icon,MBOX_OK|DECOR_TITLE|DECOR_BORDER|DIALOG_MODAL);
  about.execute();  
  return 1;
  }


// Load file
FXbool FXTextEditApp::loadfile(const FXString& file){
  struct stat info;
  char *text;
  FILE *fp;
  FXuint n;
  if(stat(file.text(),&info)!=0){
    showModalErrorBox(MBOX_OK,"Error Loading File","Non-existing file: %s",file.text());
    return FALSE;
    }
  fp=fopen(file.text(),"r");
  if(!fp){
    showModalErrorBox(MBOX_OK,"Error Loading File","Unable to open file: %s",file.text());
    return FALSE;
    }
  FXMALLOC(&text,FXchar,info.st_size+1);
  n=fread(text,1,info.st_size,fp);
  if(n!=info.st_size){
    showModalErrorBox(MBOX_OK,"Error Reading File","Unable to load entire file: %s",file.text());
    }
  else{
    text[info.st_size]='\0';
    editor->setText(text);
    editor->setModified(FALSE);
    }
  FXFREE(&text);
  fclose(fp);
  return TRUE;
  }


// Save file
FXbool FXTextEditApp::savefile(const FXString& file){
  FILE *fp;
  const char *text;
  FXuint n,len;
  text=editor->getText();
  len=editor->getLength()-1;
  fp=fopen(file.text(),"w");
  if(!fp){
    showModalErrorBox(MBOX_OK,"Error Saving File","Unable to open file: %s",file.text());
    return FALSE;
    }
  n=fwrite(text,1,len,fp);
  if(n!=len){
    showModalErrorBox(MBOX_OK,"Error Saving File","Unable to save entire file: %s",file.text());
    }
  editor->setModified(FALSE);
  fclose(fp);
  return TRUE;
  }


// Revert to saved
long FXTextEditApp::onCmdRevert(FXObject* sender,FXSelector sel,void* ptr){
  loadfile(filename);
  return 1;
  }


// Revert Update
long FXTextEditApp::onUpdRevert(FXObject* sender,FXSelector sel,void* ptr){
  if(modified!=editor->isModified()){
    modified=editor->isModified();
    FXuint msg=modified ? FXWindow::ID_ENABLE : FXWindow::ID_DISABLE;
    sender->handle(this,MKUINT(msg,SEL_COMMAND),ptr);
    if(modified){
      mainwindow->setTitle("FOX Text Editor: - "+filename+"*");
      }
    else{
      mainwindow->setTitle("FOX Text Editor: - "+filename);
      }
    }
  return 1;
  }


// Open
long FXTextEditApp::onCmdOpen(FXObject*,FXSelector,void*){
  FXuint answer;
  if(editor->isModified()){
    answer=showModalQuestionBox(MBOX_YES_NO_CANCEL,"Unsaved Document","Save current document to file?");
    if(answer==MBOX_CLICKED_CANCEL) return 1;
    if(answer==MBOX_CLICKED_YES){
      if(!namechanged){
        FXFileDialog save(this,"Save Document");
        if(save.execute()){
          if(fxexists(save.getFilename())){
            if(MBOX_CLICKED_NO==showModalQuestionBox(MBOX_YES_NO,"Overwrite Document","Overwrite existing document?.")){
              return 1;
              }
            }
          filename=save.getFilename();
          }
        }
      savefile(filename);
      }
    }
  FXFileDialog open(this,"Open Document");
  open.setFilename(filename);
  if(open.execute()){
    filename=open.getFilename();
    //mainwindow->setTitle("FOX Text Editor: - "+filename);
    loadfile(filename);
    namechanged=TRUE;
    }
  return 1;
  }


// Save
long FXTextEditApp::onCmdSave(FXObject* sender,FXSelector sel,void* ptr){
  if(!namechanged) return onCmdSaveAs(sender,sel,ptr);
  savefile(filename);
  return 1;
  }


// Save Update
long FXTextEditApp::onUpdSave(FXObject* sender,FXSelector sel,void* ptr){
  FXuint msg=editor->isModified() ? FXWindow::ID_ENABLE : FXWindow::ID_DISABLE;
  sender->handle(this,MKUINT(msg,SEL_COMMAND),ptr);
  return 1;
  }


// Save As
long FXTextEditApp::onCmdSaveAs(FXObject*,FXSelector,void*){
  FXFileDialog save(this,"Save Document");
  if(save.execute()){
    if(fxexists(save.getFilename())){
      if(MBOX_CLICKED_NO==showModalQuestionBox(MBOX_YES_NO,"Overwrite Document","Overwrite existing document?.")){
        return 1;
        }
      }
    filename=save.getFilename();
    //mainwindow->setTitle("FOX Text Editor: - "+filename);
    savefile(filename);
    namechanged=TRUE;
    }
  return 1;
  }


// New
long FXTextEditApp::onCmdNew(FXObject* sender,FXSelector sel,void* ptr){
  FXuint answer;
  if(editor->isModified()){
    answer=showModalQuestionBox(MBOX_YES_NO_CANCEL,"Unsaved Document","Save current document to file?");
    if(answer==MBOX_CLICKED_CANCEL) return 1;
    if(answer==MBOX_CLICKED_YES){
      if(!namechanged){
        FXFileDialog save(this,"Save Document");
        if(save.execute()){
          if(fxexists(save.getFilename())){
            if(MBOX_CLICKED_NO==showModalQuestionBox(MBOX_YES_NO,"Overwrite Document","Overwrite existing document?.")){
              return 1;
              }
            }
          filename=save.getFilename();
          }
        }
      savefile(filename);
      }
    }
  filename="untitled";
  //mainwindow->setTitle("FOX Text Editor: - untitled");
  editor->setText("");
  namechanged=FALSE;
  editor->setModified(FALSE);
  return 1;
  }


// Start the ball rolling
void FXTextEditApp::create(){
  FXApp::create();
  mainwindow->show();
  }


/*******************************************************************************/


// Start the whole thing
int main(int argc,char *argv[]){

  // Make application
  FXTextEditApp* application=new FXTextEditApp;
  
  // Open display
  application->init(argc,argv);

  // Create app  
  application->create();
  
  // Run
  application->run();
  }


